name: Production Release
on:
  push:
    branches:
      - master
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tags:
        description: "Manual Workflow"
        required: false
        type: boolean
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}

jobs:
  build-binaries:
    name: Build Go Binaries
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install SQLite development libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev

      - name: Build Go application
        env:
          CGO_ENABLED: 1
          CGO_CPPFLAGS: -DSQLITE_DEFAULT_FILE_PERMISSIONS=0600
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          # Set version variables similar to Dockerfile-build
          VERSION="${{ github.ref_name }}"
          COMMIT="${{ github.sha }}"
          BUILD_DATE="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

          go build -tags sqlite \
            -ldflags="-X 'github.com/ory/kratos/driver/config.Version=${VERSION}' -X 'github.com/ory/kratos/driver/config.Date=${BUILD_DATE}' -X 'github.com/ory/kratos/driver/config.Commit=${COMMIT}'" \
            -o kratos-${{ matrix.arch }} .

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: kratos-${{ matrix.arch }}
          path: kratos-${{ matrix.arch }}

  build:
    name: Build and Push Multi-Architecture Image
    runs-on: ubuntu-latest
    needs: build-binaries
    environment: production
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Move binaries to root and verify
        run: |
          mv ./artifacts/kratos-amd64/kratos-amd64 ./kratos-amd64
          mv ./artifacts/kratos-arm64/kratos-arm64 ./kratos-arm64
          chmod +x kratos-*
          ls -la kratos-*

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            maintainer=${{github.repository_owner}}
            org.opencontainers.image.title=${{github.repository}}
            org.opencontainers.image.description=This is ${{github.repository}} build from ${{github.ref_name}}
            org.opencontainers.image.vendor=${{github.repository_owner}}
          tags: |
            type=ref,event=tag,enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=raw,value=${{ github.ref_name }}-${{ github.sha }},enable=${{ startsWith(github.ref, 'refs/heads/') }}
            type=ref,event=branch,enable=${{ startsWith(github.ref, 'refs/heads/') }}

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Multi-Architecture Image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: .docker/Dockerfile-build
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
